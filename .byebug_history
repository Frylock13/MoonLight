exit
player
exit
subject.body
subject
exit
player.equipment
player.gold
Equipment::Item::BuyService.new.call(player: player, item: item)
exit
reload!
Player.count
player.equipment
player
exit
resource
self
exit
Player.count
exit
Player.count
exit
Player.count
player.equipment
exit
Player.count
User.first.player
User.first.players
User.players
User.count
player
player.equipment
Player.count
exit
User.count
Equipment::Item.count
exit
Player.count
player.gold
player
Equipment::Item::BuyService.new.call(player: player, item: item)
subject
player.equipment
player.gold
item
здфнук
exit
player.equipment
player.save
withdraw_money
put_an_item_to_the_inventory
player.equipment
player.save
withdraw_money
put_an_item_to_the_inventory
exit
current_user
current-user
exit
SignUpStatistic.count
SignUpStatistic
User.first.tenant.sign_up_statistics
User.first.tenant
Tenant.first.sign_up_statistics
Tenant.first
ap Equipment::Item.first
Equipment::Item.first
Action.first.action_type_id
Action.first.participant
Step.count
Action.first.action_type.name
Action.first.action_type
Action.first.tenant
Action.count
ActionType.first.id
User.with_deleted.last.really_destroy!
User.with_deleted.last.email
User.with_deleted.last
User.with_deleted.last.really_destroy
User.with_deleted.last.destroy
User.last.destroy
Users::UserValidation.call(params)
reload!
validation = Users::UserValidation.call(params)
params = {email: 'clkjsd@gmail.com', role: 'user'}
params = {email: 'clkjsd@gmail.com', role: 'participant'}
email
role
params = {email: 'clkjsd@gml.com', role: 'user'}
User.select(:id)
User.selec(:id)
Tenant.first.users
Tenant.count
ActionType.find_by_sql("SELECT name FROM (SELECT name FROM action_types ORDER BY name) S WHERE name LIKE 'I%' OR name LIKE '%i%'")
ActionType.find_by_sql("SELECT * FROM (SELECT name FROM action_types ORDER BY name) S WHERE name LIKE 'I%' OR name LIKE '%i%'")
ActionType.find_by_sql("SELECT * FROM (SELECT name FROM action_types ORDER BY name) WHERE name LIKE 'I%' OR name LIKE '%i%'")
ActionType.find_by_sql("SELECT * FROM(SELECT name FROM action_types ORDER BY name) WHERE name LIKE 'I%' OR name LIKE '%i%'")
ActionType.find_by_sql("SELECT * FROM(SELECT name FROM action_types ORDER BY name) WHERE name LIKE 'I%' OR name LIKE '%i%')
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'I%' OR name LIKE '%i%' SORT BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'I%' OR name LIKE '%i%' ORDER BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'N%' OR name LIKE '%n%' ORDER BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'D%' OR name LIKE '%D%' ORDER BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'C%' OR name LIKE '%c%' ORDER BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'C%' OR name LIKE '%c%' ORDER BY NAME DESC")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'S%' OR name LIKE '%s%' ORDER BY NAME DESC")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'S%' OR name LIKE '%s%' ORDER BY NAME ASC")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'S%' OR name LIKE '%s%' ORDER BY NAME")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'D%' OR name LIKE '%D%'")
ActionType.find_by_sql("SELECT name FROM action_types WHERE name LIKE 'C%' OR name LIKE '%P%'")
ActionType.find_by_sql('SELECT name FROM action_types')
ActionType.find_by_sql('SELECT action_types.name FROM action_types')
ActionType.find_by_sql('SELECT action_types.name FROM action_types').first
ActionType.find_by_sql('select * from action_types')
ActiveRecord::Base.connection.execute('SELECT * from action_types;').result
ActiveRecord::Base.connection.execute('SELECT * from action_types;').resut
ActiveRecord::Base.connection.execute('SELECT * from action_types;').all
ActiveRecord::Base.connection.execute('SELECT * from action_types')
ActiveRecord::Base.connection.execute('SELECT * from action_types;')
ActiveRecord::Base.connection.execute()
ActiveRecord::Base.execute()
ActiveRecord::Base.query()
ActiveRecord::Base.sql()
ActionType.first.name
clear
ActionType.count
EmailTemplate.first
EmailTemplate.last
EmailTemplate.first.update(active: true)
EmailTemplate.last.update(active: true)
EmailTemplate.count
Import::Seeds::EmailTemplates.call
a
EmailTemplate
User.first
User.count
User.admin.first
PopularDomainsValue.().include?('')
PopularDomainsValue.().include?('sdf')
PopularDomainsValue.include?('sdf')
PopularDomainsValue.call
PopularDomainsValue
Action.first
FormConnection.count
Form.count
Participant.count
Participant.destroy_all
User.destroy_all
Participant.first.id
Action.first.id
StepSteps::CreateValidation.call(params)
params = {action_type_id: 89, current_step_id: 103, next_step_id: 101, is_tree: true}
StepStep.last
StepStep.last.destroy
params = {action_type_id: 89, current_step_id: 103, next_step_id: 102, is_tree: true}
params = {action_type_id: 89, current_step_id: 101, next_step_id: 102, is_tree: true}
params = {action_type_id: 454, current_step_id: 555, next_step_id: Step.first.id, is_tree: true}
eixt
params = {action_type_id: 454, current_step_id: Step.first.id, next_step_id: Step.first.id, is_tree: true}
irb
current_user
current_player
currentplayer
exit
current_user.player
current_user.pplayer
current_user.p[layer
current_user
exit
except
clear
except
player
avatar
user
player
exit
player.avatar
user.avatar
user
player
avatar
user
exit
Avatar.first
player
exit
Player.create(user_id: self.id, current_hp: 20, gold: 1500, name: self.name, avatar_id: default_avatar.id)
default_avatar
Avatar.first
Avatar.count
Avatar
exit
Avatar.first
Equipment::Item.first
self
Avatar.first
default_avatar
exit
seconds_delay
repeat_count
exit
@stats
stats
next
@stats
next
stats
next
exit
Player::Stats::GetAllService.new(self, wearable_equipment)
self
stats
exit
@stats
exit
equipment.pluck(stat_name.to_sym).reduce(:+)
stats
next
stats
next
stats
next
stats
next
stats
next
stats
next
stats
equipment
exit
equipment.pluck(stat_name.to_sym).reduce(:+)
stat_name
next
stat_name
next
stat_name
equipment
equipment.pluck(stat_name.to_sym).reduce(:+)
