exit
Player::Stats::GetAllService.new(player, equipment).call
exit
current_item
put_the_current_item_in_inventory
slot_is_busy?
exit
current_item
equipment
slot_is_busy?
exit
player["ring_slot"]
player["#{new_item.category.slug}_slot"]
player["#{new_item.category.slug}"_slot]
player[new_item.category.slug]
player
current_item
player
player[current_item] = new_item.id.to_i
new_item.category.slug
new_item.category.slog
new_item.category
new_item
item
player["#{item.category.slug}_slot"]
player['helmet']
current_item
current_item = new_item.id.to_i
new_item
current_item
equipment
equipment.delete(new_item.id.to_s)
new_item.id
new_item
current_item
equipment
slot_is_busy?
level_required?
is_an_item_purchased?
exit
new_item.id
equipment
exit
equipment.include?(29)
new_item.id
equipment
is_an_item_purchased?
exit
player["#{slot}_slot"].present?
player[slot.to_sym].present?
slot
player[slot].present?
player[:slot].present?
exit
player.inventory
self.id
exit
exity
@location
exit
@location
exit
@location
@resources
exit
fight.winner
fight
gifight
exit
player["#{slot}_name"]
player["helmet_slot"]
player
items.find_by(id: player["#{slot}_name"]
slot
@weapon
exit
player
player.weapon_slot
player['weapon_slot']
player[:weapon_slot]
@weapon
items
g
exit
item_ids
exit
tools.include?(item.id.to_s)
tools.include?(item.id)
tools
item
is_an_item_purchased?
